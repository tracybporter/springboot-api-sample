import com.wiredforcode.gradle.spawn.*


configurations {
    mockserver
}

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
    }
    dependencies {
        classpath 'com.wiredforcode:gradle-spawn-plugin:0.7.0'
    }
}
dependencies {
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework:spring-test"
    testCompile "org.spockframework:spock-core"
    testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'
    testCompile "cglib:cglib:2.2"
    mockserver 'by.stub:stubby4j:3.3.0'
}

test {
    systemProperties System.properties
}
sourceSets {
    acceptance {
        groovy.srcDir file('src/acceptance/groovy')
        resources.srcDir file('src/acceptance/resources')
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

tasks.withType(Test) {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task runAcceptance(type: Test, dependsOn: ['startMockServer']) {
    description = 'Runs the acceptance tests'
    systemProperties System.properties
    group = 'verification'
    testClassesDir = sourceSets.acceptance.output.classesDir
    classpath = sourceSets.acceptance.runtimeClasspath
    reports.junitXml.destination = 'build/acceptance-results'
    reports.html.destination = 'build/reports/acceptance'
}

test.finalizedBy runAcceptance

task startMockServer(type: SpawnProcessTask, dependsOn: 'assemble') {
    description = 'Starting the external mock server'
    def stubbyJar = configurations.mockserver.files.find { it.path.contains 'stubby' }
    command "java -jar ${stubbyJar.path} -d src/acceptance/resources/sample-mock-server.yml -s 2222"
    ready 'Jetty successfully started'
    pidLockFileName '.mockserver.pid.lock'
}

task stopMockServer(type: KillProcessTask) {
    pidLockFileName '.mockserver.pid.lock'
}

runAcceptance.finalizedBy stopMockServer